
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AMPERSAND ARRAY AS BOOLEAN BOOLEANO BREAK CADENA CASE CLASS COMA COMENTARIO_LARGO COMENTARIO_UNA_LINEA CONST CONTINUE CORCHDER CORCHIZQ COUNT DEFAULT DIVIDE DO DOSPUNTOS ECHO ELSE END_SWITCH END_WHILE ENTERO EXPONENCIACION EXTENDS FALSE FIN FLOAT FLOTANTE FOR FUNCTION GLOBAL IF INICIO INTEGER LLAVEDER LLAVEIZQ MAS MASIGUAL MAYORQUE MENORQUE MENOS MENOSIGUAL MODULO MULTIPLICA NEW NULL OPERACIONSUM OPERALOGICO_MAP OPERAMAPA OPERAPUT OPERASIGNACION OPERASIG_ARRAY OPERCOMPARACION OPERLOGICO_AND OPERLOGICO_NOT OPERLOGICO_OR OPERLOGICO_OREXCLUSIVO OPERLOGICO_XOR OPERLOG_AND PARENDER PARENIZQ PRINT PRIVATE PROTECTED PUBLIC PUNTO PUNTOYCOMA RETURN RSORT STATIC STRING SWITCH TRUE VARIABLE WHILEsentencias : valor\n                  | operacion\n                  | asignacion\n                  | OpAsignacion\n\n    valor : valorNumerico\n             | CADENA\n    valorNumerico : ENTERO\n                     | FLOTANTE\n                     | VARIABLE\n                     | BOOLEANO\n    operacion : valorNumerico\n                 | valorNumerico operador operacion\n    operador : MAS\n                | MENOS\n                | MULTIPLICA\n                | DIVIDE\n                | MODULO\n                | EXPONENCIACION\n    asignacion : VARIABLE OPERASIGNACION valor\n    OpAsignacion : VARIABLE MASIGUAL valorNumerico\n    '
    
_lr_action_items = {'CADENA':([0,19,],[7,7,]),'VARIABLE':([0,12,13,14,15,16,17,18,19,20,],[8,23,-13,-14,-15,-16,-17,-18,23,23,]),'ENTERO':([0,12,13,14,15,16,17,18,19,20,],[9,9,-13,-14,-15,-16,-17,-18,9,9,]),'FLOTANTE':([0,12,13,14,15,16,17,18,19,20,],[10,10,-13,-14,-15,-16,-17,-18,10,10,]),'BOOLEANO':([0,12,13,14,15,16,17,18,19,20,],[11,11,-13,-14,-15,-16,-17,-18,11,11,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,21,22,23,24,25,26,],[0,-1,-2,-3,-4,-5,-6,-9,-7,-8,-10,-11,-12,-9,-19,-5,-20,]),'MAS':([6,8,9,10,11,21,23,],[13,-9,-7,-8,-10,13,-9,]),'MENOS':([6,8,9,10,11,21,23,],[14,-9,-7,-8,-10,14,-9,]),'MULTIPLICA':([6,8,9,10,11,21,23,],[15,-9,-7,-8,-10,15,-9,]),'DIVIDE':([6,8,9,10,11,21,23,],[16,-9,-7,-8,-10,16,-9,]),'MODULO':([6,8,9,10,11,21,23,],[17,-9,-7,-8,-10,17,-9,]),'EXPONENCIACION':([6,8,9,10,11,21,23,],[18,-9,-7,-8,-10,18,-9,]),'OPERASIGNACION':([8,],[19,]),'MASIGUAL':([8,],[20,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'sentencias':([0,],[1,]),'valor':([0,19,],[2,24,]),'operacion':([0,12,],[3,22,]),'asignacion':([0,],[4,]),'OpAsignacion':([0,],[5,]),'valorNumerico':([0,12,19,20,],[6,21,25,26,]),'operador':([6,21,],[12,12,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> sentencias","S'",1,None,None,None),
  ('sentencias -> valor','sentencias',1,'p_sentencias','analizadorSintactico.py',5),
  ('sentencias -> operacion','sentencias',1,'p_sentencias','analizadorSintactico.py',6),
  ('sentencias -> asignacion','sentencias',1,'p_sentencias','analizadorSintactico.py',7),
  ('sentencias -> OpAsignacion','sentencias',1,'p_sentencias','analizadorSintactico.py',8),
  ('valor -> valorNumerico','valor',1,'p_valor','analizadorSintactico.py',12),
  ('valor -> CADENA','valor',1,'p_valor','analizadorSintactico.py',13),
  ('valorNumerico -> ENTERO','valorNumerico',1,'p_valorNumerico','analizadorSintactico.py',16),
  ('valorNumerico -> FLOTANTE','valorNumerico',1,'p_valorNumerico','analizadorSintactico.py',17),
  ('valorNumerico -> VARIABLE','valorNumerico',1,'p_valorNumerico','analizadorSintactico.py',18),
  ('valorNumerico -> BOOLEANO','valorNumerico',1,'p_valorNumerico','analizadorSintactico.py',19),
  ('operacion -> valorNumerico','operacion',1,'p_operacion','analizadorSintactico.py',22),
  ('operacion -> valorNumerico operador operacion','operacion',3,'p_operacion','analizadorSintactico.py',23),
  ('operador -> MAS','operador',1,'p_operador','analizadorSintactico.py',26),
  ('operador -> MENOS','operador',1,'p_operador','analizadorSintactico.py',27),
  ('operador -> MULTIPLICA','operador',1,'p_operador','analizadorSintactico.py',28),
  ('operador -> DIVIDE','operador',1,'p_operador','analizadorSintactico.py',29),
  ('operador -> MODULO','operador',1,'p_operador','analizadorSintactico.py',30),
  ('operador -> EXPONENCIACION','operador',1,'p_operador','analizadorSintactico.py',31),
  ('asignacion -> VARIABLE OPERASIGNACION valor','asignacion',3,'p_asignacion','analizadorSintactico.py',34),
  ('OpAsignacion -> VARIABLE MASIGUAL valorNumerico','OpAsignacion',3,'p_OpAsignacion','analizadorSintactico.py',37),
]
