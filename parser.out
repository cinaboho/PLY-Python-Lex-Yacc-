Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AMPERSAND
    ARRAY
    AS
    BOOLEAN
    BREAK
    CASE
    CLASS
    COMA
    COMENTARIO_LARGO
    COMENTARIO_UNA_LINEA
    CONST
    CONTINUE
    CORCHDER
    CORCHIZQ
    COUNT
    DEFAULT
    DIVISION
    DO
    DOSPUNTOS
    ECHO
    ELSE
    END_SWITCH
    END_WHILE
    EXPONENCIACION
    EXTENDS
    FALSE
    FIN
    FLOAT
    FOR
    FUNCTION
    GLOBAL
    IF
    INICIO
    INTEGER
    LLAVEDER
    LLAVEIZQ
    MAYORQUE
    MENORQUE
    MODULO
    MULTIPLICACION
    NEW
    NULL
    OPERACIONSUM
    OPERALOGICO_MAP
    OPERAMAPA
    OPERAPUT
    OPERASIGNACION
    OPERASIG_ARRAY
    OPERCOMPARACION
    OPERLOGICO_AND
    OPERLOGICO_NOT
    OPERLOGICO_OR
    OPERLOGICO_OREXCLUSIVO
    OPERLOGICO_XOR
    OPERLOG_AND
    PARENDER
    PARENIZQ
    PRINT
    PRIVATE
    PROTECTED
    PUBLIC
    PUNTO
    PUNTOYCOMA
    RESTA
    RETURN
    RSORT
    STATIC
    STRING
    SWITCH
    TRUE
    WHILE

Grammar

Rule 0     S' -> sentencias
Rule 1     sentencias -> valor
Rule 2     valor -> valorNumerico
Rule 3     valor -> CADENA
Rule 4     valor -> BOOLEANO
Rule 5     valor -> VARIABLE
Rule 6     valorNumerico -> ENTERO
Rule 7     valorNumerico -> FLOTANTE
Rule 8     suma -> valorNumerico
Rule 9     suma -> valorNumerico MAS suma

Terminals, with rules where they appear

AMPERSAND            : 
ARRAY                : 
AS                   : 
BOOLEAN              : 
BOOLEANO             : 4
BREAK                : 
CADENA               : 3
CASE                 : 
CLASS                : 
COMA                 : 
COMENTARIO_LARGO     : 
COMENTARIO_UNA_LINEA : 
CONST                : 
CONTINUE             : 
CORCHDER             : 
CORCHIZQ             : 
COUNT                : 
DEFAULT              : 
DIVISION             : 
DO                   : 
DOSPUNTOS            : 
ECHO                 : 
ELSE                 : 
END_SWITCH           : 
END_WHILE            : 
ENTERO               : 6
EXPONENCIACION       : 
EXTENDS              : 
FALSE                : 
FIN                  : 
FLOAT                : 
FLOTANTE             : 7
FOR                  : 
FUNCTION             : 
GLOBAL               : 
IF                   : 
INICIO               : 
INTEGER              : 
LLAVEDER             : 
LLAVEIZQ             : 
MAS                  : 9
MAYORQUE             : 
MENORQUE             : 
MODULO               : 
MULTIPLICACION       : 
NEW                  : 
NULL                 : 
OPERACIONSUM         : 
OPERALOGICO_MAP      : 
OPERAMAPA            : 
OPERAPUT             : 
OPERASIGNACION       : 
OPERASIG_ARRAY       : 
OPERCOMPARACION      : 
OPERLOGICO_AND       : 
OPERLOGICO_NOT       : 
OPERLOGICO_OR        : 
OPERLOGICO_OREXCLUSIVO : 
OPERLOGICO_XOR       : 
OPERLOG_AND          : 
PARENDER             : 
PARENIZQ             : 
PRINT                : 
PRIVATE              : 
PROTECTED            : 
PUBLIC               : 
PUNTO                : 
PUNTOYCOMA           : 
RESTA                : 
RETURN               : 
RSORT                : 
STATIC               : 
STRING               : 
SWITCH               : 
TRUE                 : 
VARIABLE             : 5
WHILE                : 
error                : 

Nonterminals, with rules where they appear

sentencias           : 0
suma                 : 9
valor                : 1
valorNumerico        : 2 8 9

Parsing method: LALR

state 0

    (0) S' -> . sentencias
    (1) sentencias -> . valor
    (2) valor -> . valorNumerico
    (3) valor -> . CADENA
    (4) valor -> . BOOLEANO
    (5) valor -> . VARIABLE
    (6) valorNumerico -> . ENTERO
    (7) valorNumerico -> . FLOTANTE

    CADENA          shift and go to state 4
    BOOLEANO        shift and go to state 5
    VARIABLE        shift and go to state 6
    ENTERO          shift and go to state 7
    FLOTANTE        shift and go to state 8

    sentencias                     shift and go to state 1
    valor                          shift and go to state 2
    valorNumerico                  shift and go to state 3

state 1

    (0) S' -> sentencias .



state 2

    (1) sentencias -> valor .

    $end            reduce using rule 1 (sentencias -> valor .)


state 3

    (2) valor -> valorNumerico .

    $end            reduce using rule 2 (valor -> valorNumerico .)


state 4

    (3) valor -> CADENA .

    $end            reduce using rule 3 (valor -> CADENA .)


state 5

    (4) valor -> BOOLEANO .

    $end            reduce using rule 4 (valor -> BOOLEANO .)


state 6

    (5) valor -> VARIABLE .

    $end            reduce using rule 5 (valor -> VARIABLE .)


state 7

    (6) valorNumerico -> ENTERO .

    $end            reduce using rule 6 (valorNumerico -> ENTERO .)


state 8

    (7) valorNumerico -> FLOTANTE .

    $end            reduce using rule 7 (valorNumerico -> FLOTANTE .)

