Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AMPERSAND
    ARRAY
    AS
    BOOLEAN
    BREAK
    CASE
    CLASS
    COMA
    COMENTARIO_LARGO
    COMENTARIO_UNA_LINEA
    CONST
    CONTINUE
    CORCHDER
    CORCHIZQ
    COUNT
    DEFAULT
    DO
    DOSPUNTOS
    ECHO
    ELSE
    END_SWITCH
    END_WHILE
    EXTENDS
    FALSE
    FIN
    FLOAT
    FOR
    FUNCTION
    GLOBAL
    IF
    INICIO
    INTEGER
    LLAVEDER
    LLAVEIZQ
    MAYORQUE
    MENORQUE
    NEW
    NULL
    OPERACIONSUM
    OPERALOGICO_MAP
    OPERAMAPA
    OPERAPUT
    OPERASIGNACION
    OPERASIG_ARRAY
    OPERCOMPARACION
    OPERLOGICO_AND
    OPERLOGICO_NOT
    OPERLOGICO_OR
    OPERLOGICO_OREXCLUSIVO
    OPERLOGICO_XOR
    OPERLOG_AND
    PARENDER
    PARENIZQ
    PRINT
    PRIVATE
    PROTECTED
    PUBLIC
    PUNTO
    PUNTOYCOMA
    RETURN
    RSORT
    STATIC
    STRING
    SWITCH
    TRUE
    WHILE

Grammar

Rule 0     S' -> sentencias
Rule 1     sentencias -> valor
Rule 2     sentencias -> operacion
Rule 3     valor -> valorNumerico
Rule 4     valor -> CADENA
Rule 5     valorNumerico -> ENTERO
Rule 6     valorNumerico -> FLOTANTE
Rule 7     valorNumerico -> VARIABLE
Rule 8     valorNumerico -> BOOLEANO
Rule 9     operacion -> valorNumerico
Rule 10    operacion -> valorNumerico operador operacion
Rule 11    operador -> MAS
Rule 12    operador -> MENOS
Rule 13    operador -> MULTIPLICA
Rule 14    operador -> DIVIDE
Rule 15    operador -> MODULO
Rule 16    operador -> EXPONENCIACION

Terminals, with rules where they appear

AMPERSAND            : 
ARRAY                : 
AS                   : 
BOOLEAN              : 
BOOLEANO             : 8
BREAK                : 
CADENA               : 4
CASE                 : 
CLASS                : 
COMA                 : 
COMENTARIO_LARGO     : 
COMENTARIO_UNA_LINEA : 
CONST                : 
CONTINUE             : 
CORCHDER             : 
CORCHIZQ             : 
COUNT                : 
DEFAULT              : 
DIVIDE               : 14
DO                   : 
DOSPUNTOS            : 
ECHO                 : 
ELSE                 : 
END_SWITCH           : 
END_WHILE            : 
ENTERO               : 5
EXPONENCIACION       : 16
EXTENDS              : 
FALSE                : 
FIN                  : 
FLOAT                : 
FLOTANTE             : 6
FOR                  : 
FUNCTION             : 
GLOBAL               : 
IF                   : 
INICIO               : 
INTEGER              : 
LLAVEDER             : 
LLAVEIZQ             : 
MAS                  : 11
MAYORQUE             : 
MENORQUE             : 
MENOS                : 12
MODULO               : 15
MULTIPLICA           : 13
NEW                  : 
NULL                 : 
OPERACIONSUM         : 
OPERALOGICO_MAP      : 
OPERAMAPA            : 
OPERAPUT             : 
OPERASIGNACION       : 
OPERASIG_ARRAY       : 
OPERCOMPARACION      : 
OPERLOGICO_AND       : 
OPERLOGICO_NOT       : 
OPERLOGICO_OR        : 
OPERLOGICO_OREXCLUSIVO : 
OPERLOGICO_XOR       : 
OPERLOG_AND          : 
PARENDER             : 
PARENIZQ             : 
PRINT                : 
PRIVATE              : 
PROTECTED            : 
PUBLIC               : 
PUNTO                : 
PUNTOYCOMA           : 
RETURN               : 
RSORT                : 
STATIC               : 
STRING               : 
SWITCH               : 
TRUE                 : 
VARIABLE             : 7
WHILE                : 
error                : 

Nonterminals, with rules where they appear

operacion            : 2 10
operador             : 10
sentencias           : 0
valor                : 1
valorNumerico        : 3 9 10

Parsing method: LALR

state 0

    (0) S' -> . sentencias
    (1) sentencias -> . valor
    (2) sentencias -> . operacion
    (3) valor -> . valorNumerico
    (4) valor -> . CADENA
    (9) operacion -> . valorNumerico
    (10) operacion -> . valorNumerico operador operacion
    (5) valorNumerico -> . ENTERO
    (6) valorNumerico -> . FLOTANTE
    (7) valorNumerico -> . VARIABLE
    (8) valorNumerico -> . BOOLEANO

    CADENA          shift and go to state 5
    ENTERO          shift and go to state 6
    FLOTANTE        shift and go to state 7
    VARIABLE        shift and go to state 8
    BOOLEANO        shift and go to state 9

    sentencias                     shift and go to state 1
    valor                          shift and go to state 2
    operacion                      shift and go to state 3
    valorNumerico                  shift and go to state 4

state 1

    (0) S' -> sentencias .



state 2

    (1) sentencias -> valor .

    $end            reduce using rule 1 (sentencias -> valor .)


state 3

    (2) sentencias -> operacion .

    $end            reduce using rule 2 (sentencias -> operacion .)


state 4

    (3) valor -> valorNumerico .
    (9) operacion -> valorNumerico .
    (10) operacion -> valorNumerico . operador operacion
    (11) operador -> . MAS
    (12) operador -> . MENOS
    (13) operador -> . MULTIPLICA
    (14) operador -> . DIVIDE
    (15) operador -> . MODULO
    (16) operador -> . EXPONENCIACION

  ! reduce/reduce conflict for $end resolved using rule 3 (valor -> valorNumerico .)
    $end            reduce using rule 3 (valor -> valorNumerico .)
    MAS             shift and go to state 11
    MENOS           shift and go to state 12
    MULTIPLICA      shift and go to state 13
    DIVIDE          shift and go to state 14
    MODULO          shift and go to state 15
    EXPONENCIACION  shift and go to state 16

  ! $end            [ reduce using rule 9 (operacion -> valorNumerico .) ]

    operador                       shift and go to state 10

state 5

    (4) valor -> CADENA .

    $end            reduce using rule 4 (valor -> CADENA .)


state 6

    (5) valorNumerico -> ENTERO .

    MAS             reduce using rule 5 (valorNumerico -> ENTERO .)
    MENOS           reduce using rule 5 (valorNumerico -> ENTERO .)
    MULTIPLICA      reduce using rule 5 (valorNumerico -> ENTERO .)
    DIVIDE          reduce using rule 5 (valorNumerico -> ENTERO .)
    MODULO          reduce using rule 5 (valorNumerico -> ENTERO .)
    EXPONENCIACION  reduce using rule 5 (valorNumerico -> ENTERO .)
    $end            reduce using rule 5 (valorNumerico -> ENTERO .)


state 7

    (6) valorNumerico -> FLOTANTE .

    MAS             reduce using rule 6 (valorNumerico -> FLOTANTE .)
    MENOS           reduce using rule 6 (valorNumerico -> FLOTANTE .)
    MULTIPLICA      reduce using rule 6 (valorNumerico -> FLOTANTE .)
    DIVIDE          reduce using rule 6 (valorNumerico -> FLOTANTE .)
    MODULO          reduce using rule 6 (valorNumerico -> FLOTANTE .)
    EXPONENCIACION  reduce using rule 6 (valorNumerico -> FLOTANTE .)
    $end            reduce using rule 6 (valorNumerico -> FLOTANTE .)


state 8

    (7) valorNumerico -> VARIABLE .

    MAS             reduce using rule 7 (valorNumerico -> VARIABLE .)
    MENOS           reduce using rule 7 (valorNumerico -> VARIABLE .)
    MULTIPLICA      reduce using rule 7 (valorNumerico -> VARIABLE .)
    DIVIDE          reduce using rule 7 (valorNumerico -> VARIABLE .)
    MODULO          reduce using rule 7 (valorNumerico -> VARIABLE .)
    EXPONENCIACION  reduce using rule 7 (valorNumerico -> VARIABLE .)
    $end            reduce using rule 7 (valorNumerico -> VARIABLE .)


state 9

    (8) valorNumerico -> BOOLEANO .

    MAS             reduce using rule 8 (valorNumerico -> BOOLEANO .)
    MENOS           reduce using rule 8 (valorNumerico -> BOOLEANO .)
    MULTIPLICA      reduce using rule 8 (valorNumerico -> BOOLEANO .)
    DIVIDE          reduce using rule 8 (valorNumerico -> BOOLEANO .)
    MODULO          reduce using rule 8 (valorNumerico -> BOOLEANO .)
    EXPONENCIACION  reduce using rule 8 (valorNumerico -> BOOLEANO .)
    $end            reduce using rule 8 (valorNumerico -> BOOLEANO .)


state 10

    (10) operacion -> valorNumerico operador . operacion
    (9) operacion -> . valorNumerico
    (10) operacion -> . valorNumerico operador operacion
    (5) valorNumerico -> . ENTERO
    (6) valorNumerico -> . FLOTANTE
    (7) valorNumerico -> . VARIABLE
    (8) valorNumerico -> . BOOLEANO

    ENTERO          shift and go to state 6
    FLOTANTE        shift and go to state 7
    VARIABLE        shift and go to state 8
    BOOLEANO        shift and go to state 9

    valorNumerico                  shift and go to state 17
    operacion                      shift and go to state 18

state 11

    (11) operador -> MAS .

    ENTERO          reduce using rule 11 (operador -> MAS .)
    FLOTANTE        reduce using rule 11 (operador -> MAS .)
    VARIABLE        reduce using rule 11 (operador -> MAS .)
    BOOLEANO        reduce using rule 11 (operador -> MAS .)


state 12

    (12) operador -> MENOS .

    ENTERO          reduce using rule 12 (operador -> MENOS .)
    FLOTANTE        reduce using rule 12 (operador -> MENOS .)
    VARIABLE        reduce using rule 12 (operador -> MENOS .)
    BOOLEANO        reduce using rule 12 (operador -> MENOS .)


state 13

    (13) operador -> MULTIPLICA .

    ENTERO          reduce using rule 13 (operador -> MULTIPLICA .)
    FLOTANTE        reduce using rule 13 (operador -> MULTIPLICA .)
    VARIABLE        reduce using rule 13 (operador -> MULTIPLICA .)
    BOOLEANO        reduce using rule 13 (operador -> MULTIPLICA .)


state 14

    (14) operador -> DIVIDE .

    ENTERO          reduce using rule 14 (operador -> DIVIDE .)
    FLOTANTE        reduce using rule 14 (operador -> DIVIDE .)
    VARIABLE        reduce using rule 14 (operador -> DIVIDE .)
    BOOLEANO        reduce using rule 14 (operador -> DIVIDE .)


state 15

    (15) operador -> MODULO .

    ENTERO          reduce using rule 15 (operador -> MODULO .)
    FLOTANTE        reduce using rule 15 (operador -> MODULO .)
    VARIABLE        reduce using rule 15 (operador -> MODULO .)
    BOOLEANO        reduce using rule 15 (operador -> MODULO .)


state 16

    (16) operador -> EXPONENCIACION .

    ENTERO          reduce using rule 16 (operador -> EXPONENCIACION .)
    FLOTANTE        reduce using rule 16 (operador -> EXPONENCIACION .)
    VARIABLE        reduce using rule 16 (operador -> EXPONENCIACION .)
    BOOLEANO        reduce using rule 16 (operador -> EXPONENCIACION .)


state 17

    (9) operacion -> valorNumerico .
    (10) operacion -> valorNumerico . operador operacion
    (11) operador -> . MAS
    (12) operador -> . MENOS
    (13) operador -> . MULTIPLICA
    (14) operador -> . DIVIDE
    (15) operador -> . MODULO
    (16) operador -> . EXPONENCIACION

    $end            reduce using rule 9 (operacion -> valorNumerico .)
    MAS             shift and go to state 11
    MENOS           shift and go to state 12
    MULTIPLICA      shift and go to state 13
    DIVIDE          shift and go to state 14
    MODULO          shift and go to state 15
    EXPONENCIACION  shift and go to state 16

    operador                       shift and go to state 10

state 18

    (10) operacion -> valorNumerico operador operacion .

    $end            reduce using rule 10 (operacion -> valorNumerico operador operacion .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 4 resolved using rule (valor -> valorNumerico)
WARNING: rejected rule (operacion -> valorNumerico) in state 4
