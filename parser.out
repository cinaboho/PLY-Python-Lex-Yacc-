Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AMPERSAND
    ARRAY
    AS
    BOOLEAN
    BREAK
    CASE
    CLASS
    COMA
    COMENTARIO_LARGO
    COMENTARIO_UNA_LINEA
    CONST
    CONTINUE
    CORCHDER
    CORCHIZQ
    COUNT
    DEFAULT
    DO
    DOSPUNTOS
    ECHO
    ELSE
    END_SWITCH
    END_WHILE
    EXTENDS
    FALSE
    FIN
    FLOAT
    FOR
    FUNCTION
    GLOBAL
    IF
    INICIO
    INTEGER
    LLAVEDER
    LLAVEIZQ
    MAYORQUE
    MENORQUE
    NEW
    NULL
    OPERACIONSUM
    OPERALOGICO_MAP
    OPERAMAPA
    OPERAPUT
    OPERASIG_ARRAY
    OPERCOMPARACION
    OPERLOGICO_AND
    OPERLOGICO_NOT
    OPERLOGICO_OR
    OPERLOGICO_OREXCLUSIVO
    OPERLOGICO_XOR
    OPERLOG_AND
    PARENDER
    PARENIZQ
    PRINT
    PRIVATE
    PROTECTED
    PUBLIC
    PUNTO
    PUNTOYCOMA
    RETURN
    RSORT
    STATIC
    STRING
    SWITCH
    TRUE
    WHILE

Grammar

Rule 0     S' -> sentencias
Rule 1     sentencias -> valor
Rule 2     sentencias -> operacion
Rule 3     sentencias -> asignacion
Rule 4     valor -> valorNumerico
Rule 5     valor -> CADENA
Rule 6     valorNumerico -> ENTERO
Rule 7     valorNumerico -> FLOTANTE
Rule 8     valorNumerico -> VARIABLE
Rule 9     valorNumerico -> BOOLEANO
Rule 10    operacion -> valorNumerico
Rule 11    operacion -> valorNumerico operador operacion
Rule 12    operador -> MAS
Rule 13    operador -> MENOS
Rule 14    operador -> MULTIPLICA
Rule 15    operador -> DIVIDE
Rule 16    operador -> MODULO
Rule 17    operador -> EXPONENCIACION
Rule 18    asignacion -> valor OPERASIGNACION valor

Terminals, with rules where they appear

AMPERSAND            : 
ARRAY                : 
AS                   : 
BOOLEAN              : 
BOOLEANO             : 9
BREAK                : 
CADENA               : 5
CASE                 : 
CLASS                : 
COMA                 : 
COMENTARIO_LARGO     : 
COMENTARIO_UNA_LINEA : 
CONST                : 
CONTINUE             : 
CORCHDER             : 
CORCHIZQ             : 
COUNT                : 
DEFAULT              : 
DIVIDE               : 15
DO                   : 
DOSPUNTOS            : 
ECHO                 : 
ELSE                 : 
END_SWITCH           : 
END_WHILE            : 
ENTERO               : 6
EXPONENCIACION       : 17
EXTENDS              : 
FALSE                : 
FIN                  : 
FLOAT                : 
FLOTANTE             : 7
FOR                  : 
FUNCTION             : 
GLOBAL               : 
IF                   : 
INICIO               : 
INTEGER              : 
LLAVEDER             : 
LLAVEIZQ             : 
MAS                  : 12
MAYORQUE             : 
MENORQUE             : 
MENOS                : 13
MODULO               : 16
MULTIPLICA           : 14
NEW                  : 
NULL                 : 
OPERACIONSUM         : 
OPERALOGICO_MAP      : 
OPERAMAPA            : 
OPERAPUT             : 
OPERASIGNACION       : 18
OPERASIG_ARRAY       : 
OPERCOMPARACION      : 
OPERLOGICO_AND       : 
OPERLOGICO_NOT       : 
OPERLOGICO_OR        : 
OPERLOGICO_OREXCLUSIVO : 
OPERLOGICO_XOR       : 
OPERLOG_AND          : 
PARENDER             : 
PARENIZQ             : 
PRINT                : 
PRIVATE              : 
PROTECTED            : 
PUBLIC               : 
PUNTO                : 
PUNTOYCOMA           : 
RETURN               : 
RSORT                : 
STATIC               : 
STRING               : 
SWITCH               : 
TRUE                 : 
VARIABLE             : 8
WHILE                : 
error                : 

Nonterminals, with rules where they appear

asignacion           : 3
operacion            : 2 11
operador             : 11
sentencias           : 0
valor                : 1 18 18
valorNumerico        : 4 10 11

Parsing method: LALR

state 0

    (0) S' -> . sentencias
    (1) sentencias -> . valor
    (2) sentencias -> . operacion
    (3) sentencias -> . asignacion
    (4) valor -> . valorNumerico
    (5) valor -> . CADENA
    (10) operacion -> . valorNumerico
    (11) operacion -> . valorNumerico operador operacion
    (18) asignacion -> . valor OPERASIGNACION valor
    (6) valorNumerico -> . ENTERO
    (7) valorNumerico -> . FLOTANTE
    (8) valorNumerico -> . VARIABLE
    (9) valorNumerico -> . BOOLEANO

    CADENA          shift and go to state 6
    ENTERO          shift and go to state 7
    FLOTANTE        shift and go to state 8
    VARIABLE        shift and go to state 9
    BOOLEANO        shift and go to state 10

    sentencias                     shift and go to state 1
    valor                          shift and go to state 2
    operacion                      shift and go to state 3
    asignacion                     shift and go to state 4
    valorNumerico                  shift and go to state 5

state 1

    (0) S' -> sentencias .



state 2

    (1) sentencias -> valor .
    (18) asignacion -> valor . OPERASIGNACION valor

    $end            reduce using rule 1 (sentencias -> valor .)
    OPERASIGNACION  shift and go to state 11


state 3

    (2) sentencias -> operacion .

    $end            reduce using rule 2 (sentencias -> operacion .)


state 4

    (3) sentencias -> asignacion .

    $end            reduce using rule 3 (sentencias -> asignacion .)


state 5

    (4) valor -> valorNumerico .
    (10) operacion -> valorNumerico .
    (11) operacion -> valorNumerico . operador operacion
    (12) operador -> . MAS
    (13) operador -> . MENOS
    (14) operador -> . MULTIPLICA
    (15) operador -> . DIVIDE
    (16) operador -> . MODULO
    (17) operador -> . EXPONENCIACION

  ! reduce/reduce conflict for $end resolved using rule 4 (valor -> valorNumerico .)
    OPERASIGNACION  reduce using rule 4 (valor -> valorNumerico .)
    $end            reduce using rule 4 (valor -> valorNumerico .)
    MAS             shift and go to state 13
    MENOS           shift and go to state 14
    MULTIPLICA      shift and go to state 15
    DIVIDE          shift and go to state 16
    MODULO          shift and go to state 17
    EXPONENCIACION  shift and go to state 18

  ! $end            [ reduce using rule 10 (operacion -> valorNumerico .) ]

    operador                       shift and go to state 12

state 6

    (5) valor -> CADENA .

    OPERASIGNACION  reduce using rule 5 (valor -> CADENA .)
    $end            reduce using rule 5 (valor -> CADENA .)


state 7

    (6) valorNumerico -> ENTERO .

    MAS             reduce using rule 6 (valorNumerico -> ENTERO .)
    MENOS           reduce using rule 6 (valorNumerico -> ENTERO .)
    MULTIPLICA      reduce using rule 6 (valorNumerico -> ENTERO .)
    DIVIDE          reduce using rule 6 (valorNumerico -> ENTERO .)
    MODULO          reduce using rule 6 (valorNumerico -> ENTERO .)
    EXPONENCIACION  reduce using rule 6 (valorNumerico -> ENTERO .)
    OPERASIGNACION  reduce using rule 6 (valorNumerico -> ENTERO .)
    $end            reduce using rule 6 (valorNumerico -> ENTERO .)


state 8

    (7) valorNumerico -> FLOTANTE .

    MAS             reduce using rule 7 (valorNumerico -> FLOTANTE .)
    MENOS           reduce using rule 7 (valorNumerico -> FLOTANTE .)
    MULTIPLICA      reduce using rule 7 (valorNumerico -> FLOTANTE .)
    DIVIDE          reduce using rule 7 (valorNumerico -> FLOTANTE .)
    MODULO          reduce using rule 7 (valorNumerico -> FLOTANTE .)
    EXPONENCIACION  reduce using rule 7 (valorNumerico -> FLOTANTE .)
    OPERASIGNACION  reduce using rule 7 (valorNumerico -> FLOTANTE .)
    $end            reduce using rule 7 (valorNumerico -> FLOTANTE .)


state 9

    (8) valorNumerico -> VARIABLE .

    MAS             reduce using rule 8 (valorNumerico -> VARIABLE .)
    MENOS           reduce using rule 8 (valorNumerico -> VARIABLE .)
    MULTIPLICA      reduce using rule 8 (valorNumerico -> VARIABLE .)
    DIVIDE          reduce using rule 8 (valorNumerico -> VARIABLE .)
    MODULO          reduce using rule 8 (valorNumerico -> VARIABLE .)
    EXPONENCIACION  reduce using rule 8 (valorNumerico -> VARIABLE .)
    OPERASIGNACION  reduce using rule 8 (valorNumerico -> VARIABLE .)
    $end            reduce using rule 8 (valorNumerico -> VARIABLE .)


state 10

    (9) valorNumerico -> BOOLEANO .

    MAS             reduce using rule 9 (valorNumerico -> BOOLEANO .)
    MENOS           reduce using rule 9 (valorNumerico -> BOOLEANO .)
    MULTIPLICA      reduce using rule 9 (valorNumerico -> BOOLEANO .)
    DIVIDE          reduce using rule 9 (valorNumerico -> BOOLEANO .)
    MODULO          reduce using rule 9 (valorNumerico -> BOOLEANO .)
    EXPONENCIACION  reduce using rule 9 (valorNumerico -> BOOLEANO .)
    OPERASIGNACION  reduce using rule 9 (valorNumerico -> BOOLEANO .)
    $end            reduce using rule 9 (valorNumerico -> BOOLEANO .)


state 11

    (18) asignacion -> valor OPERASIGNACION . valor
    (4) valor -> . valorNumerico
    (5) valor -> . CADENA
    (6) valorNumerico -> . ENTERO
    (7) valorNumerico -> . FLOTANTE
    (8) valorNumerico -> . VARIABLE
    (9) valorNumerico -> . BOOLEANO

    CADENA          shift and go to state 6
    ENTERO          shift and go to state 7
    FLOTANTE        shift and go to state 8
    VARIABLE        shift and go to state 9
    BOOLEANO        shift and go to state 10

    valor                          shift and go to state 19
    valorNumerico                  shift and go to state 20

state 12

    (11) operacion -> valorNumerico operador . operacion
    (10) operacion -> . valorNumerico
    (11) operacion -> . valorNumerico operador operacion
    (6) valorNumerico -> . ENTERO
    (7) valorNumerico -> . FLOTANTE
    (8) valorNumerico -> . VARIABLE
    (9) valorNumerico -> . BOOLEANO

    ENTERO          shift and go to state 7
    FLOTANTE        shift and go to state 8
    VARIABLE        shift and go to state 9
    BOOLEANO        shift and go to state 10

    valorNumerico                  shift and go to state 21
    operacion                      shift and go to state 22

state 13

    (12) operador -> MAS .

    ENTERO          reduce using rule 12 (operador -> MAS .)
    FLOTANTE        reduce using rule 12 (operador -> MAS .)
    VARIABLE        reduce using rule 12 (operador -> MAS .)
    BOOLEANO        reduce using rule 12 (operador -> MAS .)


state 14

    (13) operador -> MENOS .

    ENTERO          reduce using rule 13 (operador -> MENOS .)
    FLOTANTE        reduce using rule 13 (operador -> MENOS .)
    VARIABLE        reduce using rule 13 (operador -> MENOS .)
    BOOLEANO        reduce using rule 13 (operador -> MENOS .)


state 15

    (14) operador -> MULTIPLICA .

    ENTERO          reduce using rule 14 (operador -> MULTIPLICA .)
    FLOTANTE        reduce using rule 14 (operador -> MULTIPLICA .)
    VARIABLE        reduce using rule 14 (operador -> MULTIPLICA .)
    BOOLEANO        reduce using rule 14 (operador -> MULTIPLICA .)


state 16

    (15) operador -> DIVIDE .

    ENTERO          reduce using rule 15 (operador -> DIVIDE .)
    FLOTANTE        reduce using rule 15 (operador -> DIVIDE .)
    VARIABLE        reduce using rule 15 (operador -> DIVIDE .)
    BOOLEANO        reduce using rule 15 (operador -> DIVIDE .)


state 17

    (16) operador -> MODULO .

    ENTERO          reduce using rule 16 (operador -> MODULO .)
    FLOTANTE        reduce using rule 16 (operador -> MODULO .)
    VARIABLE        reduce using rule 16 (operador -> MODULO .)
    BOOLEANO        reduce using rule 16 (operador -> MODULO .)


state 18

    (17) operador -> EXPONENCIACION .

    ENTERO          reduce using rule 17 (operador -> EXPONENCIACION .)
    FLOTANTE        reduce using rule 17 (operador -> EXPONENCIACION .)
    VARIABLE        reduce using rule 17 (operador -> EXPONENCIACION .)
    BOOLEANO        reduce using rule 17 (operador -> EXPONENCIACION .)


state 19

    (18) asignacion -> valor OPERASIGNACION valor .

    $end            reduce using rule 18 (asignacion -> valor OPERASIGNACION valor .)


state 20

    (4) valor -> valorNumerico .

    $end            reduce using rule 4 (valor -> valorNumerico .)


state 21

    (10) operacion -> valorNumerico .
    (11) operacion -> valorNumerico . operador operacion
    (12) operador -> . MAS
    (13) operador -> . MENOS
    (14) operador -> . MULTIPLICA
    (15) operador -> . DIVIDE
    (16) operador -> . MODULO
    (17) operador -> . EXPONENCIACION

    $end            reduce using rule 10 (operacion -> valorNumerico .)
    MAS             shift and go to state 13
    MENOS           shift and go to state 14
    MULTIPLICA      shift and go to state 15
    DIVIDE          shift and go to state 16
    MODULO          shift and go to state 17
    EXPONENCIACION  shift and go to state 18

    operador                       shift and go to state 12

state 22

    (11) operacion -> valorNumerico operador operacion .

    $end            reduce using rule 11 (operacion -> valorNumerico operador operacion .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 5 resolved using rule (valor -> valorNumerico)
WARNING: rejected rule (operacion -> valorNumerico) in state 5
